#!/usr/bin/env pl
:- use_module(library(lists), [member/2]).
:- use_module(library(readutil), [read_file_to_terms/3]).
:- use_module(library(func)).


main([]) :-
    show_help.
main([help|_]) :-
    show_help.

% initialize a brand new, empty pack project
main([init, Name|_]) :-
    use_module(library(filesex), [make_directory_path/1, link_file/3]),

    % build directory structure
    make_directory_path('~w/prolog' $ Name),
    working_directory(_,Name),
    make_directory_path(t),

    % create rudimentary README
    Author = 'Michael Hendricks',
    Email = 'michael@ndrix.org',
    License = 'BSD',
    readme_template(Name, Author, Email, License),
    link_file('README', 'README.md', symbolic),
    link_file('../README', 'prolog/readme.txt', symbolic),

    % create pack metadata file
    tell('pack.pl'),
    Version = '0.0.1',
    Host = 'http://packs.ndrix.com',
    Home = '~w/~w/index.html' $ [Host,Name],
    Download = '~w/~w/~w-~w.tgz' $ [Host,Name,Name,Version],
    write_terms(
        [ name(Name)
        , version(Version)
        , title('')
        , author(Author, Email)
        , packager(Author, Email)
        , maintainer(Author, Email)
        , home(Home)
        , download(Download)
        ]
    ),
    told,

    % create empty module file
    tell('prolog/~w.pl' $ Name),
    format(':- module(~w, []).~n', [Name]),
    nl,
    format('% TODO implement the module~n'),
    told,

    % create a simple, failing test
    tell('t/examples.pl'),
    format(':- use_module(library(~w)).~n', [Name]),
    nl,
    format('% define helper predicates here~n'),
    nl,
    format(':- use_module(library(tap)).~n'),
    nl,
    format('% add tests showing common usage~n'),
    format('todo :- fail.~n'),
    told,

    format('Created pack directory: ~w~n', [Name]).

% generate pack documentation
main([doc|_]) :-
    inside_a_pack_directory,
    format('Generating documentation ...~n'),
    use_module(library(doc_files), [doc_save/2]),

    pack_title(Title),
    doc_save( prolog,
        [ doc_root(doc)
        , format(html)
        , title(Title)
        , if(true)
        , recursive(true)
        ]
    ).

% build an archive file with relevant pack components
main([archive|_]) :-
    inside_a_pack_directory,
    pack_archive(Archive),
    format('Building archive ...~n'),
    format(atom(Cmd), 'tar czf ~p README pack.pl prolog/*.pl', [Archive]),
    shell(Cmd).

% publish all pack files to Google Cloud Storage
main([push|_]) :-
    inside_a_pack_directory,
    main([doc]),       % update documentation
    main([archive]),   % build pack archive
    format('Copying files to a public location ...~n'),
    pack_name(Name),
    pack_archive(Archive),
    BaseCmd = 'gsutil cp -a public-read -z html,css doc/*',
    format(atom(Cp), '~p ~p gs://packs.ndrix.com/~p', [BaseCmd, Archive, Name]),
    shell(Cp),
    true.

% run all tests matching t/*.pl
main([test|ProveArgs]) :-
    % build SWI initialization file to configure library path
    tell('init.pl'),
    writeln(':- user:asserta(file_search_path(library,prolog)).'),
    told,

    % run prove to execute all tests
    atomic_list_concat(ProveArgs, ' ', Args),
    SWI = 'swipl -q -f init.pl -t main -s',
    format(atom(Prove), "prove --ext=pl -r -e '~w' ~w t", [SWI,Args]),
    shell(Prove),

    % remove initialization file now that we're done with it
    rm('init.pl').

show_help :-
    format('gift manages and publishes SWI-Prolog packs.~n'),
    format('Subcommands include the following~n'),
    nl,
    format('  init    - create a new pack directory structure~n'),
    format('  doc     - generate documentation~n'),
    format('  test    - run TAP tests~n'),
    format('  archive - build the pack''s tar ball~n'),
    format('  push    - publish docs and archive publicly~n'),
    nl,
    format('gift help    - show this help screen~n'),
    true.  % make patches cleaner

% demand that the current working directory contains a SWI-Prolog pack
inside_a_pack_directory :-
    ( exists_file('pack.pl') ->
        true
    ; % otherwise ->
        print_message(error, format('Run gift from a pack directory',[])),
        halt(1)
    ).

% create a default README file
readme_template(Name, Author, Email, License) :-
    tell('README'),
    format('# Synopsis~n'),
    nl,
    format('    :- use_module(library(~w)).~n', [Name]),
    format('    main :-~n'),
    format('        % give one motivating example~n'),
    format('        true.~n'),
    nl,
    format('# Description~n'),
    nl,
    format('# Installation~n'),
    nl,
    format('Using SWI-Prolog 6.3 or later:~n'),
    nl,
    format('    ?- pack_install(~w).~n', [Name]),
    nl,
    format('@author ~w <~w>~n', [Author,Email]),
    format('@license ~w~n', [License]),
    told.

% the filename in which this pack is archived
pack_archive(FileName) :-
    pack_name(Name),
    pack_version(Version),
    format(atom(FileName), '~p-~p.tgz', [Name, Version]).

pack_attribute(Pattern) :-
    read_file_to_terms('pack.pl', Terms, []),
    member(Pattern, Terms).

pack_title(Title) :-
    pack_attribute(title(Title)).
pack_name(Name) :-
    pack_attribute(name(Name)).
pack_version(Version) :-
    pack_attribute(version(Version)).

write_terms([]).
write_terms([Term|Terms]) :-
    format('~q.~n', Term),
    write_terms(Terms).
